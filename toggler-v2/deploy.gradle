apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

def deploy = new Properties()
deploy.load(new FileInputStream("$projectDir/deploy.settings"))

group=deploy.groupId
//version = "1.0.2"
//project.version = "1.0.2"

Properties properties = new Properties()
File propFile = new File(rootDir,"local.properties")
if(propFile.exists()) //load only if bintray file is present
 properties.load(propFile.newDataInputStream())
else {
    properties.put("bintray.user", System.getenv('BINTRAY_USER') != null ? System.getenv('BINTRAY_USER') : "")
    properties.put("ghToken", System.getenv('GH_TOKEN') != null ? System.getenv('GH_TOKEN') : "No github token")
    properties.put("bintray.apikey", System.getenv('BINTRAY_APIKEY') != null ? System.getenv('BINTRAY_APIKEY') : "")
}
println("Properties: "+properties.toString())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    publications = ['Toggler']
    configurations = ['archives']
    pkg {
        repo = "android"
        name = deploy.id
        websiteUrl = deploy.siteUrl
        vcsUrl = deploy.gitUrl
        licenses = deploy.licenses.split(',')
        publish = true
        version {
            println("Project version: "+ project.version)
            name = project.version
            released = new Date()
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//    // options.encoding = 'UTF-8'
//}

artifacts {
    //archives javadocJar
    archives sourcesJar
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "suyambu"
            name "Ponsuyambu"
            email "suyambu.vps@gmail.com"
        }
    }
    scm {
        url deploy.gitUrl
    }
}

// Create the publication with the pom configuration:
project.afterEvaluate {
publishing {
    publications {
        Toggler(MavenPublication) {
            //artifact javadocJar
            artifact bundleReleaseAar
//            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact sourcesJar
            groupId deploy.groupId
            artifactId deploy.id
            version version.toString()
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Fragment Intent API to do fragment navigation easily')
                root.appendNode('name', 'Toggler')
                root.children().last() + pomConfig
            }
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ponsuyambu/Toggler")
            credentials {
                username = "ponsuyambu"
                password = System.getenv("GH_TOKEN")
            }
        }
    }
}
}

