
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "de.mannodermaus.android-junit5"
apply plugin: 'jacoco'
apply plugin: 'de.gliderpilot.semantic-release'


android {
    compileSdkVersion 29
    buildToolsVersion "30.0.0"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName version.toString()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: [
//if you have already run those tasks in your build, just comment them
//'testMycmsMockDebugUnitTest',
//'testMycmsProdDebugUnitTest',
//'createMycmsMockDebugCoverageReport',
//'createMycmsProdDebugCoverageReport',
]) {
//Define which type of report you want to generate
    reports {
        xml.enabled = true
        html.enabled = true
    }
    //define which classes to exclude
    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
            '**/*Module.*', // Modules for Dagger.
            '**/*Dagger*.*', // Dagger auto-generated code.
            '**/*MembersInjector*.*', // Dagger auto-generated code.
            '**/*_Provide*Factory*.*',
            '**/*_Factory.*', //Dagger auto-generated code
            '**/*$*$*.*', // Anonymous classes generated by kotlin
            //add libraries
            'android/**/*.*',
            'com/**/*.*',
            'uk/**/*.*',
            'io/**/*.*',
            //remove what we don't test
            'androidTest/**/*.*',
            'test/**/*.*',
            '**/injector/**/*.*',
            '**/model/**/*.*',
            '**/mock/**/*.*',
            '**/event/**/*.*',
            '**/**_ViewBinding**',
            '**/*EventType.*',
            '**/**Mocked'
    ]
    //Define your source and your classes: we want to test the production code
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = files(["src/main/java","src/mycms/java"])
    //Explain to Jacoco where is your source code
    sourceDirectories.setFrom(files([mainSrc]))
//Explain to Jacoco where are you .class file
    classDirectories.setFrom(files([debugTree]))
    //As you want to gather all your tests reports, add the ec and exec you want to be took into
    //account when generating the report
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testMycmsMockDebugUnitTest.exec",
            "jacoco/testMycmsProdDebugUnitTest.exec",
            "outputs/code-coverage/connected/flavors/**/*coverage.ec"
    ]))
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.3.1'

    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'

    implementation 'com.google.android.material:material:1.1.0'

    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'


    testImplementation "io.mockk:mockk:1.10.0"
    testImplementation "io.mockk:mockk-android:1.10.0"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}"
    testImplementation 'junit:junit:4.13'
    // (Required) Writing and executing Unit Tests on the JUnit Platform
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.6.2"

    // (Optional) If you need "Parameterized Tests"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.6.2"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.6.2"

    androidTestImplementation "io.mockk:mockk-android:1.10.0"
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.1'
    androidTestImplementation 'androidx.test:core-ktx:1.2.0'
    androidTestImplementation "io.mockk:mockk-android:1.10.0"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}"

}

apply from: 'deploy.gradle'

if (!version.toString().endsWith('-SNAPSHOT')) {
    //publish.dependsOn "publishTogglerPublicationToGitHubPackagesRepository"
    publish.dependsOn "bintrayUpload"
}
else { }
    //publish.dependsOn "publishTogglerPublicationToGitHubPackagesRepository"


project.ext.ghToken = project.hasProperty('GH_TOKEN') ? project.getProperty('GH_TOKEN') : System.getenv('GH_TOKEN') ?: null

semanticRelease {
    repo {
        ghToken = "e428d7c475ea1a223732f18b0347603d46cb4f50"
    }
}

